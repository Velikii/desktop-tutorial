import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from datetime import datetime
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("/Users/macbookair/config/.env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            ['/start', '/help'],
            ['üå§ –ú–æ—Å–∫–≤–∞', 'üå§ –°–ü–±'],
            ['üìç –•–æ—Ç—å–∫–æ–≤—Å–∫–∏–π –ø—Ä.9', 'üå§ –ù—å—é-–ô–æ—Ä–∫']
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    user_info = [
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!" if user.first_name else "üëã –ü—Ä–∏–≤–µ—Ç!",
        f"üÜî ID: {user.id}",
        f"üë§ –ò–º—è: {user.first_name} {user.last_name}" if user.last_name else f"üë§ –ò–º—è: {user.first_name}",
        f"üîπ Username: @{user.username}" if user.username else "üîπ Username: –Ω–µ —É–∫–∞–∑–∞–Ω",
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {current_date}",
        "",
        "üåç –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:"
    ]
    
    await update.message.reply_text(
        "\n".join(filter(None, user_info)),
        reply_markup=get_main_keyboard()
    )

async def handle_weather(location: str, display_name: str = None) -> str:
    try:
        url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={location}&lang=ru"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if 'error' in data:
            return f"üö´ –û—à–∏–±–∫–∞: {data['error']['message']}"
            
        loc = data['location']
        curr = data['current']
        
        name = display_name if display_name else f"{loc['name']}, {loc['country']}"
        
        return (
            f"üåç {name}\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {loc['lat']:.4f}¬∞N, {loc['lon']:.4f}¬∞E\n"
            f"üïí –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {loc['localtime'].split()[1]}\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {curr['temp_c']}¬∞C\n"
            f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {curr['condition']['text']}\n"
            f"üí® –í–µ—Ç–µ—Ä: {curr['wind_kph']} –∫–º/—á\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {curr['humidity']}%"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return "‚ö† –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if text.startswith('–ø–æ–≥–æ–¥–∞'):
        query = text[6:].strip()
        if query:
            weather = await handle_weather(query)
        else:
            weather = "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥/–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ '–ø–æ–≥–æ–¥–∞'"
    elif text in ['–º–æ—Å–∫–≤–∞', 'üå§ –º–æ—Å–∫–≤–∞']:
        weather = await handle_weather("–ú–æ—Å–∫–≤–∞")
    elif text in ['—Å–ø–±', 'üå§ —Å–ø–±', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥']:
        weather = await handle_weather("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    elif text in ['—Ö–æ—Ç—å–∫–æ–≤—Å–∫–∏–π –ø—Ä.9', 'üìç —Ö–æ—Ç—å–∫–æ–≤—Å–∫–∏–π –ø—Ä.9']:
        weather = await handle_weather("–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥", "–•–æ—Ç—å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥, 9")
    elif text in ['–Ω—å—é-–π–æ—Ä–∫', 'üå§ –Ω—å—é-–π–æ—Ä–∫']:
        weather = await handle_weather("–ù—å—é-–ô–æ—Ä–∫")
    else:
        weather = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–≥–æ–¥–∞ [–º–µ—Å—Ç–æ]'"
    
    await update.message.reply_text(
        weather,
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–≥–æ–¥–∞' –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

def main():
    if not TOKEN or not WEATHER_API_KEY:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã TOKEN –∏–ª–∏ WEATHER_API_KEY –≤ .env!")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()